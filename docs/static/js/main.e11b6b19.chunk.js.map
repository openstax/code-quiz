{"version":3,"sources":["editor.js","run.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","props","editor","createRef","editorDidMount","monaco","focus","state","code","ref","this","width","height","language","theme","defaultValue","options","selectOnLineNumbers","current","getValue","Component","Sk","window","outf","text","mypre","document","getElementById","innerHTML","builtinRead","x","undefined","builtinFiles","App","useState","setCode","editorRef","useRef","run","useCallback","prog","value","pre","configure","output","read","TurtleGraphics","target","misceval","asyncToPromise","importMainWithBody","then","mod","console","log","err","toString","className","onChange","onClick","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"uQAGaA,EAAb,kDAGE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAHRC,OAASC,sBAEU,EAOnBC,eAAiB,SAACF,EAAQG,GACxBH,EAAOI,SANP,EAAKC,MAAQ,CACXC,KAAM,wBAHS,EAHrB,qDAsBI,OACE,cAAC,IAAD,CACEC,IAAKC,KAAKR,OACVS,MAAM,MACNC,OAAO,MACPC,SAAS,SACTC,MAAM,UACNC,aAAcL,KAAKT,MAAMc,aACzBC,QAXY,CACdC,qBAAqB,GAYnBb,eAAgBM,KAAKN,mBAhC7B,4BAeI,OAAOM,KAAKR,OAAOgB,QAAQhB,OAAOiB,eAftC,GAA4BC,aCHtBC,EAAKC,OAAOD,GAIlB,SAASE,EAAKC,GACV,IAAIC,EAAQC,SAASC,eAAe,UACpCF,EAAMG,UAAYH,EAAMG,UAAYJ,EAGxC,SAASK,EAAYC,GACjB,QAAwBC,IAApBV,EAAGW,mBAA8DD,IAAhCV,EAAGW,aAAH,MAAyBF,GACtD,KAAM,oBAAsBA,EAAI,IACxC,OAAOT,EAAGW,aAAH,MAAyBF,GCerBG,MAtBf,WAAgB,IAAD,EACWC,mBAAS,yBADpB,mBACN1B,EADM,KACA2B,EADA,KAGPC,EAAYC,mBAEZC,EAAMC,uBAAY,WDUnB,IAAiBC,ICTZJ,EAAUlB,QAAQuB,MDUff,SAASC,eAAe,UAC9BC,UAAY,GAClBP,EAAGqB,IAAM,SACTrB,EAAGsB,UAAU,CAACC,OAAOrB,EAAMsB,KAAKhB,KAC/BR,EAAGyB,iBAAmBzB,EAAGyB,eAAiB,KAAKC,OAAS,WACzC1B,EAAG2B,SAASC,gBAAe,WACvC,OAAO5B,EAAG6B,mBAAmB,WAAW,EAAOV,GAAM,MAE/CW,MAAK,SAASC,GACpBC,QAAQC,IAAI,cAEZ,SAASC,GACTF,QAAQC,IAAIC,EAAIC,iBCrBlB,IAEH,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,CAAQhD,IAAK2B,EAAWsB,SAAUvB,EAASpB,aAAcP,IACzD,sBAAKiD,UAAU,QAAf,UACE,8BACE,wBAAQE,QAASrB,EAAjB,uBAEF,qBAAKsB,GAAG,kBCTDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7C,SAASC,eAAe,SAM1BkC,M","file":"static/js/main.e11b6b19.chunk.js","sourcesContent":["import React, { createRef, Component } from 'react';\nimport MonacoEditor from 'react-monaco-editor';\n\nexport class Editor extends Component {\n  editor = createRef()\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      code: '// type your code...',\n    }\n  }\n\n  editorDidMount = (editor, monaco) => {\n    editor.focus();\n  }\n\n  get value() {\n    return this.editor.current.editor.getValue()\n  }\n\n  render() {\n    const options = {\n      selectOnLineNumbers: true\n    };\n    return (\n      <MonacoEditor\n        ref={this.editor}\n        width=\"400\"\n        height=\"400\"\n        language=\"python\"\n        theme=\"vs-dark\"\n        defaultValue={this.props.defaultValue}\n        options={options}\n\n        editorDidMount={this.editorDidMount}\n      />\n    );\n  }\n}\n","const Sk = window.Sk\n\n// output functions are configurable.  This one just appends some text\n// to a pre element.\nfunction outf(text) {\n    var mypre = document.getElementById(\"output\");\n    mypre.innerHTML = mypre.innerHTML + text;\n}\n\nfunction builtinRead(x) {\n    if (Sk.builtinFiles === undefined || Sk.builtinFiles[\"files\"][x] === undefined)\n            throw \"File not found: '\" + x + \"'\";\n    return Sk.builtinFiles[\"files\"][x];\n}\n\n// Here's everything you need to run a python program in skulpt\n// grab the code from your textarea\n// get a reference to your pre element for output\n// configure the output function\n// call Sk.importMainWithBody()\nexport function runCode(prog) {\n   var mypre = document.getElementById(\"output\");\n   mypre.innerHTML = '';\n   Sk.pre = \"output\";\n   Sk.configure({output:outf, read:builtinRead});\n   (Sk.TurtleGraphics || (Sk.TurtleGraphics = {})).target = 'mycanvas';\n   var myPromise = Sk.misceval.asyncToPromise(function() {\n       return Sk.importMainWithBody(\"<stdin>\", false, prog, true);\n   });\n   myPromise.then(function(mod) {\n       console.log('success');\n   },\n       function(err) {\n       console.log(err.toString());\n   });\n}\n\n","import React, { useState, useRef, useCallback } from 'react'\nimport './App.css';\nimport {Editor} from './editor'\nimport { runCode } from './run';\n\nfunction App() {\n  const [code, setCode] = useState('print(\"Hello World!\")')\n  \n  const editorRef = useRef()\n\n  const run = useCallback(() => {\n    runCode(editorRef.current.value)\n  }, [])\n  \n  return (\n    <div className=\"App\">\n      <Editor ref={editorRef} onChange={setCode} defaultValue={code} />\n      <div className=\"right\">\n        <div>\n          <button onClick={run}>Execute</button>\n        </div>\n        <div id=\"output\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}