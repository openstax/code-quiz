{"version":3,"sources":["editor.js","run.js","exercise.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","editor","createRef","editorDidMount","monaco","props","readonly","focus","prevProps","this","current","ref","width","height","language","theme","defaultValue","options","selectOnLineNumbers","getValue","Component","Sk","window","runCode","a","code","input","result","output","configure","text","push","inputfun","read","x","undefined","builtinFiles","Error","pre","misceval","asyncToPromise","importMainWithBody","success","error","toString","runExercise","inputs","expected","results","i","match","Array","isArray","passed","Boolean","find","line","lineIndex","length","ran","r","Status","status","fail","join","Exercise","id","hidden","children","active","onPassed","initialCode","useState","setStatus","editorRef","useRef","run","value","newStatus","data-exercise-id","className","cn","onClick","App","Set","visible","setVisible","reveal","entries","ex","document","querySelector","scrollIntoView","behavior","has","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9ec2a6d2.chunk.js","sourcesContent":["import React, { createRef, Component } from 'react';\nimport MonacoEditor from 'react-monaco-editor';\n\nexport class Editor extends Component {\n    editor = createRef()\n\n    editorDidMount = (editor, monaco) => {\n        if (!this.props.readonly) {\n            editor.focus();\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!this.props.readonly && prevProps.readonly)  {\n            this.editor.current.editor.focus()\n        }\n    }\n\n    get value() {\n        return this.editor.current.editor.getValue()\n    }\n\n    render() {\n        const options = {\n            selectOnLineNumbers: true\n        };\n        return (\n            <MonacoEditor\n              ref={this.editor}\n              width=\"400\"\n              height=\"400\"\n              language=\"python\"\n              theme=\"vs-dark\"\n              readonly={this.props.readonly}\n              defaultValue={this.props.defaultValue}\n              options={options}\n              editorDidMount={this.editorDidMount}\n            />\n        );\n    }\n}\n","const Sk = window.Sk\n\n// Here's everything you need to run a python program in skulpt\n// grab the code from your textarea\n// get a reference to your pre element for output\n// configure the output function\n// call Sk.importMainWithBody()\nexport async function runCode({ code, input }) {\n    const result = {\n        output: []\n    }\n\n    Sk.configure({\n        output(text) {\n            // eslint-disable-next-line eqeqeq\n            if (text != \"\\n\" && text != \"\") {\n                result.output.push(text)\n            }\n        },\n        //inputfunTakesPrompt: true,\n        inputfun() {\n            return input\n        },\n        read(x) {\n            if (Sk.builtinFiles === undefined || Sk.builtinFiles[\"files\"][x] === undefined)\n                throw new Error(\"File not found: '\" + x + \"'\");\n            return Sk.builtinFiles[\"files\"][x];\n        },\n\n    })\n    Sk.pre = \"output\";\n\n    try {\n        await Sk.misceval.asyncToPromise(function() {\n            return Sk.importMainWithBody(\"<stdin>\", false, code, true);\n        });\n        result.success = true\n    } catch (error) {\n        result.success = false\n        result.error = error.toString()\n    }\n    return result\n}\n\nexport async function runExercise({code, inputs, expected}) {\n\n    const results = []\n\n    for (let i = 0; i < inputs.length; i++) {\n        const input = inputs[i]\n        const match = Array.isArray(expected[i]) ? expected[i] : [expected[i]]\n        const result = await runCode({ code, input })\n        result.input = input\n        result.expected = match\n        // console.log(result.output, match)\n        result.passed = Boolean( // eslint-disable-next-line eqeqeq\n            result.success && !result.output.find((line, lineIndex) => line != match[lineIndex])\n        )\n        results.push(result)\n    }\n    \n    return { ran: true, passed: !results.find(r => !r.passed), results }\n\n}\n","import React, { useState, useRef } from 'react';\nimport {Editor} from './editor'\nimport cn from 'classnames'\nimport { runExercise } from './run';\n\n\nconst Status = ({ status }) => {\n    if (!status.ran) return null\n\n    if (status.passed) {\n        return <h5>Great Job!</h5>\n                         }\n\n    const fail = status.results.find(r => r.passed === false)\n    return (\n        <div>\n          <h5>Sorry that didn't match what was expected:</h5>\n          <div>\n            <b>Expected:</b> <pre>{fail.expected.join(\"\\n\")}</pre>\n          </div>\n          <div>\n            <b>Received:</b> <pre>{fail.output.join(\"\\n\")}</pre>\n          </div>\n          {fail.error && (\n              <div>\n                <b>Error:</b> <pre>{fail.error}</pre>\n              </div>)}\n        </div>\n    )\n}\n\nexport const Exercise = ({\n    id, hidden, children, active, inputs, onPassed, expected,\n    initialCode = '',\n}) => {\n    const [status, setStatus] = useState({ ran: false })\n\n    const editorRef = useRef()\n\n    const run = async () => {\n        const newStatus = await runExercise({\n            inputs,\n            expected,\n            code: editorRef.current.value,\n        })\n        setStatus(newStatus)\n        if (newStatus.passed) { onPassed(newStatus) }\n    }\n\n    return (\n        <div data-exercise-id={id} className={cn('exercise', { hidden } )}>\n\n          {children}\n\n          <Editor readonly={hidden} ref={editorRef} defaultValue={initialCode} />\n          {!hidden && <button onClick={run}>Execute</button>}\n          <Status status={status} />\n\n        </div>\n\n    )\n\n}\n","import React, { useState } from 'react'\nimport cn from 'classnames'\nimport './App.css';\nimport {Exercise} from './exercise';\n\n\nfunction App() {\n\n    const [visible, setVisible] = useState(new Set([1]))\n    const reveal = (id) =>{\n        setVisible(new Set([...visible.entries(), id]))\n        const ex = document.querySelector(`[data-exercise-id=\"${id}\"]`)\n        if(ex) {\n            ex.scrollIntoView({ behavior: \"smooth\" })\n        }\n    }\n\n    return (\n        <div className=\"App\">\n\n          <Exercise\n            id={1}\n            hidden={!visible.has(1)}\n            inputs={['']}\n            expected={['Hello World']}\n            onPassed={() => reveal(2)}\n          >\n            <p>\n              It is a tradition in programming languages to write a simple program\n              that prints \"Hello World!\"\n            </p>\n            <p>\n              See if you can write a program that does so below:\n            </p>\n          </Exercise>\n\n\n          <Exercise\n            id={2}\n            hidden={!visible.has(2)}\n            inputs={[0,1,2,3,4,5,6,7,8,9,10]}\n            expected={['FizzBuzz', 1, 2, 'Fizz', 4, 'Buzz', 'Fizz', '7', '8', 'Fizz','Buzz']}\n            onPassed={() => reveal(1)}\n          >\n\n            <p>\n              Now for something a little more complicated.\n            </p>\n            <p>\n              Write a program that will read a single number and then print\n              it.  <b>Hint:</b><i>You can read a string using the python `input()` function</i>\n            </p>\n            <p>But if the number is a multiple of three print \"Fizz\" instead of the number.</p>\n            <p>For the multiples of five print \"Buzz\".</p>\n            <p>For numbers which are multiples of both three and five print \"FizzBuzz\".</p>\n\n          </Exercise>\n\n          <div className={cn('exercise', { hidden: !visible.has('ex-2') } )} id=\"ex-2\">\n          </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}